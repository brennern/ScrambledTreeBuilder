[{"path":"https://brennern.github.io/ScrambledTreeBuilder/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 ScrambledTreeBuilder authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/articles/ScrambledTreeBuilder.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"ScrambledTreeBuilder","text":"ScrambledTreeBuilder package consists numerous data formatting functions phylogenetic tree building.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/articles/ScrambledTreeBuilder.html","id":"load-package","dir":"Articles","previous_headings":"","what":"Load Package","title":"ScrambledTreeBuilder","text":"Whilst ScrambledTreeBuilder package contains necessary functions required convert data .yaml files data type suitable phylogenetic trees, loading ggplot2 allow greater customization final tree products.","code":"library(ScrambledTreeBuilder) library(ggplot2)"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/articles/ScrambledTreeBuilder.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example Data","title":"ScrambledTreeBuilder","text":"package utilizes example .yaml files halobacteria genome comparison data. regards genome scrambling, many studies showcased significant genome rearrangments halobacteria species due dozens insertion sequence families. Thus, ScrambledTreeBuilder package useful uncovering relationships amongst species. Upon performing vs. genome comparison six halobacteria species using Nextflow genome pairwise alignment pipeline input file script GenomicBreaks, multiple .yaml files stored directory called ‘extdata/PairwiseComparisons’. load data RStudio variable name ‘yamlFileData’. Next, can use ‘formatStats()’ function transform .yaml files single dataframe. dataframe containing species information important, allow us extract specific columns/variables plot onto phylogenetic trees later. need process data transforming dataframe matrix. can perform task ‘makeMatrix()’ function. function can quite useful, may use create matrix wish build tree create matrix store species information particular variable. example, may want build tree based percent identity values, store ‘treeMatrix’. , may want plot strand randomisation index scores trees study genome scrambling, store ‘valueMatrix’. Using ‘treeMatrix’, create hclust object use produce tibble dataset. Transforming tibble dataset necessary allow us add variable ‘valueMatrix’ onto tree correct label placement node without changing structure tree. tibble dataset, can utilize ‘makeValueTibble()’ function add value ‘valueMatrix’ tibble data.","code":"resultsDir <- system.file(\"extdata/PairwiseComparisons\", package = \"ScrambledTreeBuilder\") yamlFileData <- list.files(resultsDir, pattern = \"*.yaml.bz2\", full.names = TRUE) names(yamlFileData) <- yamlFileData |> basename() |> sub(pat = \".yaml.bz2\", rep=\"\") exDataFrame <- formatStats(yamlFileData) valuesToBuildTheTree <- \"percent_identity_global\" treeMatrix <- makeMatrix(exDataFrame, valuesToBuildTheTree, 100, 50) treeMatrix #>                                   Halobacterium_noricense #> Halobacterium_noricense                         100.00000 #> Halobacterium_salinarum                          74.94759 #> Haloferax_mediterranei_ATCC_33500                66.42841 #> Haloferax_volcanii_DS2                           69.93183 #> Salarchaeum_japonicum                            72.11068 #> Halobacterium_litoreum                           78.81199 #>                                   Halobacterium_salinarum #> Halobacterium_noricense                          74.94623 #> Halobacterium_salinarum                         100.00000 #> Haloferax_mediterranei_ATCC_33500                66.97889 #> Haloferax_volcanii_DS2                           68.48311 #> Salarchaeum_japonicum                            71.80855 #> Halobacterium_litoreum                           75.75208 #>                                   Haloferax_mediterranei_ATCC_33500 #> Halobacterium_noricense                                    68.45333 #> Halobacterium_salinarum                                    67.00552 #> Haloferax_mediterranei_ATCC_33500                         100.00000 #> Haloferax_volcanii_DS2                                     80.39441 #> Salarchaeum_japonicum                                      68.65929 #> Halobacterium_litoreum                                     68.72077 #>                                   Haloferax_volcanii_DS2 Salarchaeum_japonicum #> Halobacterium_noricense                         69.96147              72.42201 #> Halobacterium_salinarum                         68.48878              71.55815 #> Haloferax_mediterranei_ATCC_33500               80.22559              68.41933 #> Haloferax_volcanii_DS2                         100.00000              69.79642 #> Salarchaeum_japonicum                           69.82446             100.00000 #> Halobacterium_litoreum                          70.16293              72.74950 #>                                   Halobacterium_litoreum #> Halobacterium_noricense                         78.73936 #> Halobacterium_salinarum                         75.84298 #> Haloferax_mediterranei_ATCC_33500               68.27405 #> Haloferax_volcanii_DS2                          70.11358 #> Salarchaeum_japonicum                           72.75352 #> Halobacterium_litoreum                         100.00000 valuesToPlaceOnLabels <- \"index_avg_strandRand\" valueMatrix <- makeMatrix(exDataFrame, valuesToPlaceOnLabels, 1, 0.5) valueMatrix #>                                   Halobacterium_noricense #> Halobacterium_noricense                        1.00000000 #> Halobacterium_salinarum                        0.23236975 #> Haloferax_mediterranei_ATCC_33500              0.07235525 #> Haloferax_volcanii_DS2                         0.05324080 #> Salarchaeum_japonicum                          0.13308910 #> Halobacterium_litoreum                         0.39458005 #>                                   Halobacterium_salinarum #> Halobacterium_noricense                        0.23325365 #> Halobacterium_salinarum                        1.00000000 #> Haloferax_mediterranei_ATCC_33500              0.07435565 #> Haloferax_volcanii_DS2                         0.12659775 #> Salarchaeum_japonicum                          0.07810210 #> Halobacterium_litoreum                         0.53375310 #>                                   Haloferax_mediterranei_ATCC_33500 #> Halobacterium_noricense                                  0.07203045 #> Halobacterium_salinarum                                  0.07326215 #> Haloferax_mediterranei_ATCC_33500                        1.00000000 #> Haloferax_volcanii_DS2                                   0.31779245 #> Salarchaeum_japonicum                                    0.10685560 #> Halobacterium_litoreum                                   0.07664500 #>                                   Haloferax_volcanii_DS2 Salarchaeum_japonicum #> Halobacterium_noricense                       0.05398890            0.13300580 #> Halobacterium_salinarum                       0.12422790            0.07897470 #> Haloferax_mediterranei_ATCC_33500             0.31721145            0.10753295 #> Haloferax_volcanii_DS2                        1.00000000            0.01033135 #> Salarchaeum_japonicum                         0.00958875            1.00000000 #> Halobacterium_litoreum                        0.06412845            0.18808275 #>                                   Halobacterium_litoreum #> Halobacterium_noricense                       0.39265650 #> Halobacterium_salinarum                       0.53228275 #> Haloferax_mediterranei_ATCC_33500             0.08363770 #> Haloferax_volcanii_DS2                        0.06379615 #> Salarchaeum_japonicum                         0.18078755 #> Halobacterium_litoreum                        1.00000000 # Let's average the target-query and query-target replicate pairs. Tibble <- makeTidyTree(100 - (treeMatrix/2 + t(treeMatrix)/2)) Tibble #> # A tbl_tree abstraction: 11 × 4 #> # which can be converted to treedata or phylo  #> # via as.treedata or as.phylo #>    parent  node branch.length label                             #>     <int> <int>         <dbl> <chr>                             #>  1     11     1         10.6  Halobacterium_noricense           #>  2     10     2         12.3  Halobacterium_salinarum           #>  3      8     3          9.85 Haloferax_mediterranei_ATCC_33500 #>  4      8     4          9.85 Haloferax_volcanii_DS2            #>  5      9     5         13.9  Salarchaeum_japonicum             #>  6     11     6         10.6  Halobacterium_litoreum            #>  7      7     7         NA    NA                                #>  8      7     8          5.79 NA                                #>  9      7     9          1.75 NA                                #> 10      9    10          1.57 NA                                #> 11     10    11          1.70 NA tibbleWithValue <- makeValueTibble(Tibble, valueMatrix, colname = \"Strand_Randomisation_Index\") tibbleWithValue #> # A tbl_tree abstraction: 11 × 5 #> # which can be converted to treedata or phylo  #> # via as.treedata or as.phylo #>    parent  node branch.length label                       Strand_Randomisation…¹ #>     <int> <int>         <dbl> <chr>                                        <dbl> #>  1     11     1         10.6  Halobacterium_noricense                    NA      #>  2     10     2         12.3  Halobacterium_salinarum                    NA      #>  3      8     3          9.85 Haloferax_mediterranei_ATC…                NA      #>  4      8     4          9.85 Haloferax_volcanii_DS2                     NA      #>  5      9     5         13.9  Salarchaeum_japonicum                      NA      #>  6     11     6         10.6  Halobacterium_litoreum                     NA      #>  7      7     7         NA    NA                                          0.0740 #>  8      7     8          5.79 NA                                          0.317  #>  9      7     9          1.75 NA                                          0.131  #> 10      9    10          1.57 NA                                          0.382  #> 11     10    11          1.70 NA                                          0.393  #> # ℹ abbreviated name: ¹​Strand_Randomisation_Index tibbleWithMultipleValues <- makeValueTibble(tibbleWithValue, treeMatrix, colname = \"Percent_Identity\") tibbleWithMultipleValues #> # A tbl_tree abstraction: 11 × 6 #> # which can be converted to treedata or phylo  #> # via as.treedata or as.phylo #>    parent  node branch.length label      Strand_Randomisation…¹ Percent_Identity #>     <int> <int>         <dbl> <chr>                       <dbl>            <dbl> #>  1     11     1         10.6  Halobacte…                NA                  NA   #>  2     10     2         12.3  Halobacte…                NA                  NA   #>  3      8     3          9.85 Haloferax…                NA                  NA   #>  4      8     4          9.85 Haloferax…                NA                  NA   #>  5      9     5         13.9  Salarchae…                NA                  NA   #>  6     11     6         10.6  Halobacte…                NA                  NA   #>  7      7     7         NA    NA                         0.0740             68.6 #>  8      7     8          5.79 NA                         0.317              80.2 #>  9      7     9          1.75 NA                         0.131              72.2 #> 10      9    10          1.57 NA                         0.382              75.4 #> 11     10    11          1.70 NA                         0.393              78.7 #> # ℹ abbreviated name: ¹​Strand_Randomisation_Index"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/articles/ScrambledTreeBuilder.html","id":"plot-trees","dir":"Articles","previous_headings":"Example Data","what":"Plot trees","title":"ScrambledTreeBuilder","text":"Let’s use tibbleWithMultipleValues object plot trees. case, generated tree built based 100 minus percent identity values distance, computed average strand randomisation scores nodes. can plot values labels tree.   course, spotted interesting sub-tree, can plot node IDs easily extract analysis.","code":"visualizeTree(tibbleWithMultipleValues, tibbleWithMultipleValues$Strand_Randomisation_Index) +   ggplot2::ggtitle(paste(\"Tree built with Percent Identity and labelled with Strand Randomisation Index scores\")) +    ggtree::geom_hilight(node = 8, fill = \"lightblue1\", alpha = .4, type = \"gradient\", gradient.direction = 'tr') +   ggtree::geom_hilight(node = 9, fill = \"pink\", alpha = .4, type = \"gradient\", gradient.direction = 'tr') #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. visualizeTree(tibbleWithMultipleValues, tibbleWithMultipleValues$Strand_Randomisation_Index, ynudge = 0.2) +   ggplot2::ggtitle(\"Tree labeled with Strand Randomisation Index and Percent Identity (built with Percent Identity)\") +   ggplot2::scale_color_viridis_c(name = \"Strand Randomisation Index\", option = \"cividis\") +   ggnewscale::new_scale_colour() +   ggtree::geom_label(ggtree::aes(label=round(Percent_Identity, digits = 3), color = Percent_Identity), label.size = 0.25, size = 3, na.rm = TRUE, label.padding = ggtree::unit(0.15, \"lines\"), nudge_y = -0.2) +   viridis::scale_color_viridis(option = \"magma\", name = \"Percent Identity\") #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. visualizeTree(tibbleWithMultipleValues, tibbleWithMultipleValues$node) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale."},{"path":"https://brennern.github.io/ScrambledTreeBuilder/articles/ScrambledTreeBuilder.html","id":"plot-node-and-leaf-values","dir":"Articles","previous_headings":"Example Data","what":"Plot node and leaf values","title":"ScrambledTreeBuilder","text":"can also plot leaf node values standard scatterplot.","code":"plot(exDataFrame$percent_identity_global, exDataFrame$index_avg_strandRand, col = 'grey', xlab = \"Percent identity\", ylab=\"Strand randomisation index\", main = \"Leaf values are in grey and node values in red\") points(tibbleWithMultipleValues$Percent_Identity, tibbleWithMultipleValues$Strand_Randomisation_Index, col = 'red')  plotTwoBranches <- function(tree, node, X, Y, ...) {   children <- tidytree::child   (tree, node)   if(nrow(children) != 2) return(invisible())   parent   <- tidytree::parent(tree, children$node[1])   lines(     c(parent[, X, drop=T], children[, X, drop=T][1]),     c(parent[, Y, drop=T], children[, Y, drop=T][1]),     ...   )   lines(     c(parent[, X, drop=T], children[, X, drop=T][2]),     c(parent[, Y, drop=T], children[, Y, drop=T][2]),     ...   ) }  plotAllBranches <- function(tree, X, Y, ... ) {   unique(tree$parent) |> sort() |> sapply(\\(node) {     plotTwoBranches(tree, node, X, Y, ...)   })   return(invisible()) }  plotAllBranches(tibbleWithMultipleValues, \"Percent_Identity\", \"Strand_Randomisation_Index\", col = \"red\")"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Noa Brenner. Author, maintainer.           Charles Plessy <charles.plessy@oist.jp> [aut]","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brenner N (2024). ScrambledTreeBuilder: Builds Phylogenetic Trees Showcasing Genome Scrambling Species. R package version 0.0.0.9001, https://brennern.github.io/ScrambledTreeBuilder/, https://github.com/brennern/ScrambledTreeBuilder.","code":"@Manual{,   title = {ScrambledTreeBuilder: Builds Phylogenetic Trees Showcasing Genome Scrambling in Species},   author = {Noa Brenner},   year = {2024},   note = {R package version 0.0.0.9001, https://brennern.github.io/ScrambledTreeBuilder/},   url = {https://github.com/brennern/ScrambledTreeBuilder}, }"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/index.html","id":"scrambledtreebuilder","dir":"","previous_headings":"","what":"Builds Phylogenetic Trees Showcasing Genome Scrambling in Species","title":"Builds Phylogenetic Trees Showcasing Genome Scrambling in Species","text":"goal ScrambledTreeBuilder allow users conveniently produce phylogenetic trees species purpose studying genome scrambling.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Builds Phylogenetic Trees Showcasing Genome Scrambling in Species","text":"can install development version ScrambledTreeBuilder GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"brennern/ScrambledTreeBuilder\") |> suppressMessages()"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Builds Phylogenetic Trees Showcasing Genome Scrambling in Species","text":"performing Vs. genome comparison dozens species, may .yaml files output. order convert files dataframe R, may use formatStats() function. Extract .yaml files respective directory store information variable yamlFiles. build phylogenetic trees, data frame need transformed matrix. function makeMatrix() accomplish . , order plot percent identity strand randomisation index scores tree, need extract tree data tibble utilize functions makeValueTibble(). Finally, visualize phylogenetic tree, can utilize visualizeTree() function inputting tibble data containing desired variable.","code":"library(ScrambledTreeBuilder) |> suppressPackageStartupMessages()  resultsDir <- system.file(\"extdata/PairwiseComparisons\", package = \"ScrambledTreeBuilder\") yamlFileData <- list.files(resultsDir, pattern = \"*.yaml.bz2\", full.names = TRUE) names(yamlFileData) <- yamlFileData |> basename() |> sub(pat = \".yaml.bz2\", rep=\"\")  exDataFrame <- formatStats(yamlFileData) valuesToBuildTheTree <- \"percent_identity_global\" treeMatrix <- makeMatrix(exDataFrame, valuesToBuildTheTree, 100, 50) valuesToPlaceOnLabels <- \"index_avg_strandRand\" valueMatrix <- makeMatrix(exDataFrame, valuesToPlaceOnLabels, 1, 0.5) HClust <- hclust(dist(treeMatrix), method = \"complete\") Tibble <- tidytree::as_tibble(tidytree::as.phylo(HClust)) tibbleWithValue <- makeValueTibble(Tibble, valueMatrix, colname = \"Strand_Randomisation_Index\") tibbleWithMultipleValues <- makeValueTibble(tibbleWithValue, treeMatrix, colname = \"Percent_Identity\") SingleValueTree <- visualizeTree(tibbleWithValue, tibbleWithValue$Strand_Randomisation_Index)  SingleValueTree +   ggplot2::ggtitle(paste(\"Tree built with Percent Identity and labelled with Strand Randomisation Index scores\")) +    viridis::scale_color_viridis(name = \"Strand Randomisation Index\") +   ggtree::geom_hilight(node = 8, fill = \"lightblue1\", alpha = .2, type = \"gradient\", gradient.direction = 'tr') +   ggtree::geom_hilight(node = 9, fill = \"pink\", alpha = .2, type = \"gradient\", gradient.direction = 'tr') MultiValueTree <- visualizeTree(tibbleWithMultipleValues, tibbleWithMultipleValues$Strand_Randomisation_Index, ynudge = 0.2) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale.  MultiValueTree +   ggplot2::ggtitle(\"Tree labeled with Strand Randomisation Index and Percent Identity (built with Percent Identity)\") +   viridis::scale_color_viridis(name = \"Strand Randomisation Index\") +   ggnewscale::new_scale_colour() +   ggtree::geom_label(ggtree::aes(label=round(Percent_Identity, digits = 3), color = Percent_Identity), label.size = 0.25, size = 3, na.rm = TRUE, label.padding = ggtree::unit(0.15, \"lines\"), nudge_y = -0.2) +   viridis::scale_color_viridis(option = \"magma\", name = \"Percent Identity\")"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/HClust.html","id":null,"dir":"Reference","previous_headings":"","what":"HClust — HClust","title":"HClust — HClust","text":"Hierarchical clustering species genome data matrix input.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/HClust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HClust — HClust","text":"","code":"data(\"HClust\")"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/HClust.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"HClust — HClust","text":"format : List 7  $ merge      : int [1:5, 1:2] -3 -1 -2 -5 1 -4 -6 2 3 4  $ height     : num [1:5] 27.4 30 35.9 40.3 49.5  $ order      : int [1:6] 3 4 5 2 1 6  $ labels     : chr [1:6] \"Halobacterium_noricense\" \"Halobacterium_salinarum\" \"Haloferax_mediterranei_ATCC_33500\" \"Haloferax_volcanii_DS2\" ...  $ method     : chr \"complete\"  $ call       : language hclust(d = dist(treeMatrix), method = \"complete\")  $ dist.method: chr \"euclidean\"  - attr(*, \"class\")= chr \"hclust\"","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/HClust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HClust — HClust","text":"","code":"data(HClust) ## maybe str(HClust) ; plot(HClust) ..."},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/Tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble — Tibble","title":"Tibble — Tibble","text":"Tibble dataset species data.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/Tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble — Tibble","text":"","code":"data(\"Tibble\")"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/Tibble.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tibble — Tibble","text":"data frame 11 observations following 4 variables. parent numeric vector node numeric vector branch.length numeric vector label character vector","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/Tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble — Tibble","text":"","code":"data(Tibble) ## maybe str(Tibble) ; plot(Tibble) ..."},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/exDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"exDataFrame — exDataFrame","title":"exDataFrame — exDataFrame","text":"Dataframe object containing species genome data.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/exDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exDataFrame — exDataFrame","text":"","code":"data(\"exDataFrame\")"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/exDataFrame.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"exDataFrame — exDataFrame","text":"data frame 30 observations following 448 variables. aligned_length_Min numeric vector aligned_length_Q1 numeric vector aligned_length_Median numeric vector aligned_length_Mean numeric vector aligned_length_Q3 numeric vector aligned_length_Max numeric vector aligned_length_L50 numeric vector aligned_length_Total numeric vector aligned_length_N numeric vector aligned_score_Min numeric vector aligned_score_Q1 numeric vector aligned_score_Median numeric vector aligned_score_Mean numeric vector aligned_score_Q3 numeric vector aligned_score_Max numeric vector aligned_score_L50 numeric vector aligned_score_Total numeric vector aligned_score_N numeric vector aligned_matches_Min numeric vector aligned_matches_Q1 numeric vector aligned_matches_Median numeric vector aligned_matches_Mean numeric vector aligned_matches_Q3 numeric vector aligned_matches_Max numeric vector aligned_matches_L50 numeric vector aligned_matches_Total numeric vector aligned_matches_N numeric vector aligned_mismatches_Min numeric vector aligned_mismatches_Q1 numeric vector aligned_mismatches_Median numeric vector aligned_mismatches_Mean numeric vector aligned_mismatches_Q3 numeric vector aligned_mismatches_Max numeric vector aligned_mismatches_L50 numeric vector aligned_mismatches_Total numeric vector aligned_mismatches_N numeric vector aligned_gaps_target_Q1 numeric vector aligned_gaps_target_Median numeric vector aligned_gaps_target_Mean numeric vector aligned_gaps_target_Q3 numeric vector aligned_gaps_target_Max numeric vector aligned_gaps_target_L50 numeric vector aligned_gaps_target_Total numeric vector aligned_gaps_target_N numeric vector aligned_gaps_query_Q1 numeric vector aligned_gaps_query_Median numeric vector aligned_gaps_query_Mean numeric vector aligned_gaps_query_Q3 numeric vector aligned_gaps_query_Max numeric vector aligned_gaps_query_L50 numeric vector aligned_gaps_query_Total numeric vector aligned_gaps_query_N numeric vector matching_aligned_Min numeric vector matching_aligned_Q1 numeric vector matching_aligned_Median numeric vector matching_aligned_Mean numeric vector matching_aligned_Q3 numeric vector matching_aligned_Max numeric vector matching_aligned_L50 numeric vector matching_aligned_Total numeric vector matching_aligned_N numeric vector matching_target_Min numeric vector matching_target_Q1 numeric vector matching_target_Median numeric vector matching_target_Mean numeric vector matching_target_Q3 numeric vector matching_target_Max numeric vector matching_target_L50 numeric vector matching_target_Total numeric vector matching_target_N numeric vector matching_query_Min numeric vector matching_query_Q1 numeric vector matching_query_Median numeric vector matching_query_Mean numeric vector matching_query_Q3 numeric vector matching_query_Max numeric vector matching_query_L50 numeric vector matching_query_Total numeric vector matching_query_N numeric vector mismatching_aligned_Min numeric vector mismatching_aligned_Q1 numeric vector mismatching_aligned_Median numeric vector mismatching_aligned_Mean numeric vector mismatching_aligned_Q3 numeric vector mismatching_aligned_Max numeric vector mismatching_aligned_L50 numeric vector mismatching_aligned_Total numeric vector mismatching_aligned_N numeric vector mismatching_target_Min numeric vector mismatching_target_Q1 numeric vector mismatching_target_Median numeric vector mismatching_target_Mean numeric vector mismatching_target_Q3 numeric vector mismatching_target_Max numeric vector mismatching_target_L50 numeric vector mismatching_target_Total numeric vector mismatching_target_N numeric vector mismatching_query_Min numeric vector mismatching_query_Q1 numeric vector mismatching_query_Median numeric vector mismatching_query_Mean numeric vector mismatching_query_Q3 numeric vector mismatching_query_Max numeric vector mismatching_query_L50 numeric vector mismatching_query_Total numeric vector mismatching_query_N numeric vector aligned_width_target_Min numeric vector aligned_width_target_Q1 numeric vector aligned_width_target_Median numeric vector aligned_width_target_Mean numeric vector aligned_width_target_Q3 numeric vector aligned_width_target_Max numeric vector aligned_width_target_L50 numeric vector aligned_width_target_Total numeric vector aligned_width_target_N numeric vector aligned_width_query_Min numeric vector aligned_width_query_Q1 numeric vector aligned_width_query_Median numeric vector aligned_width_query_Mean numeric vector aligned_width_query_Q3 numeric vector aligned_width_query_Max numeric vector aligned_width_query_L50 numeric vector aligned_width_query_Total numeric vector aligned_width_query_N numeric vector chain_width_target_Min numeric vector chain_width_target_Q1 numeric vector chain_width_target_Median numeric vector chain_width_target_Mean numeric vector chain_width_target_Q3 numeric vector chain_width_target_Max numeric vector chain_width_target_L50 numeric vector chain_width_target_Total numeric vector chain_width_target_N numeric vector chain_width_query_Min numeric vector chain_width_query_Q1 numeric vector chain_width_query_Median numeric vector chain_width_query_Mean numeric vector chain_width_query_Q3 numeric vector chain_width_query_Max numeric vector chain_width_query_L50 numeric vector chain_width_query_Total numeric vector chain_width_query_N numeric vector collinear_width_target_Min numeric vector collinear_width_target_Q1 numeric vector collinear_width_target_Median numeric vector collinear_width_target_Mean numeric vector collinear_width_target_Q3 numeric vector collinear_width_target_Max numeric vector collinear_width_target_L50 numeric vector collinear_width_target_Total numeric vector collinear_width_target_N numeric vector isolated_width_target_Min numeric vector isolated_width_target_Q1 numeric vector isolated_width_target_Median numeric vector isolated_width_target_Mean numeric vector isolated_width_target_Q3 numeric vector isolated_width_target_Max numeric vector isolated_width_target_L50 numeric vector isolated_width_target_Total numeric vector isolated_width_target_N numeric vector bridge_width_target_Min numeric vector bridge_width_target_Q1 numeric vector bridge_width_target_Median numeric vector bridge_width_target_Mean numeric vector bridge_width_target_Q3 numeric vector bridge_width_target_Max numeric vector bridge_width_target_L50 numeric vector bridge_width_target_Total numeric vector bridge_width_target_N numeric vector breakpoint_width_target_Min numeric vector breakpoint_width_target_Q1 numeric vector breakpoint_width_target_Median numeric vector breakpoint_width_target_Mean numeric vector breakpoint_width_target_Q3 numeric vector breakpoint_width_target_Max numeric vector breakpoint_width_target_L50 numeric vector breakpoint_width_target_Total numeric vector breakpoint_width_target_N numeric vector inverted_width_target_Min numeric vector inverted_width_target_Q1 numeric vector inverted_width_target_Median numeric vector inverted_width_target_Mean numeric vector inverted_width_target_Q3 numeric vector inverted_width_target_Max numeric vector inverted_width_target_L50 numeric vector inverted_width_target_Total numeric vector inverted_width_target_N numeric vector translocated_width_target_Min numeric vector translocated_width_target_Q1 numeric vector translocated_width_target_Median numeric vector translocated_width_target_Mean numeric vector translocated_width_target_Q3 numeric vector translocated_width_target_Max numeric vector translocated_width_target_L50 numeric vector translocated_width_target_Total numeric vector translocated_width_target_N numeric vector guessed_target_length_Min numeric vector guessed_target_length_Q1 numeric vector guessed_target_length_Median numeric vector guessed_target_length_Mean numeric vector guessed_target_length_Q3 numeric vector guessed_target_length_Max numeric vector guessed_target_length_L50 numeric vector guessed_target_length_Total numeric vector guessed_target_length_N numeric vector guessed_query_length_Min numeric vector guessed_query_length_Q1 numeric vector guessed_query_length_Median numeric vector guessed_query_length_Mean numeric vector guessed_query_length_Q3 numeric vector guessed_query_length_Max numeric vector guessed_query_length_L50 numeric vector guessed_query_length_Total numeric vector guessed_query_length_N numeric vector index_synteny_target numeric vector index_synteny_query numeric vector index_correlation_target numeric vector index_correlation_query numeric vector index_GOCvicinity4_target numeric vector index_GOCvicinity4_query numeric vector index_strandRand_target numeric vector index_strandRand_query numeric vector aligned_length_bestpair_Min numeric vector aligned_length_bestpair_Q1 numeric vector aligned_length_bestpair_Median numeric vector aligned_length_bestpair_Mean numeric vector aligned_length_bestpair_Q3 numeric vector aligned_length_bestpair_Max numeric vector aligned_length_bestpair_L50 numeric vector aligned_length_bestpair_Total numeric vector aligned_length_bestpair_N numeric vector aligned_score_bestpair_Min numeric vector aligned_score_bestpair_Q1 numeric vector aligned_score_bestpair_Median numeric vector aligned_score_bestpair_Mean numeric vector aligned_score_bestpair_Q3 numeric vector aligned_score_bestpair_Max numeric vector aligned_score_bestpair_L50 numeric vector aligned_score_bestpair_Total numeric vector aligned_score_bestpair_N numeric vector aligned_matches_bestpair_Min numeric vector aligned_matches_bestpair_Q1 numeric vector aligned_matches_bestpair_Median numeric vector aligned_matches_bestpair_Mean numeric vector aligned_matches_bestpair_Q3 numeric vector aligned_matches_bestpair_Max numeric vector aligned_matches_bestpair_L50 numeric vector aligned_matches_bestpair_Total numeric vector aligned_matches_bestpair_N numeric vector aligned_mismatches_bestpair_Min numeric vector aligned_mismatches_bestpair_Q1 numeric vector aligned_mismatches_bestpair_Median numeric vector aligned_mismatches_bestpair_Mean numeric vector aligned_mismatches_bestpair_Q3 numeric vector aligned_mismatches_bestpair_Max numeric vector aligned_mismatches_bestpair_L50 numeric vector aligned_mismatches_bestpair_Total numeric vector aligned_mismatches_bestpair_N numeric vector aligned_gaps_target_bestpair_Q1 numeric vector aligned_gaps_target_bestpair_Median numeric vector aligned_gaps_target_bestpair_Mean numeric vector aligned_gaps_target_bestpair_Q3 numeric vector aligned_gaps_target_bestpair_Max numeric vector aligned_gaps_target_bestpair_L50 numeric vector aligned_gaps_target_bestpair_Total numeric vector aligned_gaps_target_bestpair_N numeric vector aligned_gaps_query_bestpair_Q1 numeric vector aligned_gaps_query_bestpair_Median numeric vector aligned_gaps_query_bestpair_Mean numeric vector aligned_gaps_query_bestpair_Q3 numeric vector aligned_gaps_query_bestpair_Max numeric vector aligned_gaps_query_bestpair_L50 numeric vector aligned_gaps_query_bestpair_Total numeric vector aligned_gaps_query_bestpair_N numeric vector matching_aligned_bestpair_Min numeric vector matching_aligned_bestpair_Q1 numeric vector matching_aligned_bestpair_Median numeric vector matching_aligned_bestpair_Mean numeric vector matching_aligned_bestpair_Q3 numeric vector matching_aligned_bestpair_Max numeric vector matching_aligned_bestpair_L50 numeric vector matching_aligned_bestpair_Total numeric vector matching_aligned_bestpair_N numeric vector matching_target_bestpair_Min numeric vector matching_target_bestpair_Q1 numeric vector matching_target_bestpair_Median numeric vector matching_target_bestpair_Mean numeric vector matching_target_bestpair_Q3 numeric vector matching_target_bestpair_Max numeric vector matching_target_bestpair_L50 numeric vector matching_target_bestpair_Total numeric vector matching_target_bestpair_N numeric vector matching_query_bestpair_Min numeric vector matching_query_bestpair_Q1 numeric vector matching_query_bestpair_Median numeric vector matching_query_bestpair_Mean numeric vector matching_query_bestpair_Q3 numeric vector matching_query_bestpair_Max numeric vector matching_query_bestpair_L50 numeric vector matching_query_bestpair_Total numeric vector matching_query_bestpair_N numeric vector mismatching_aligned_bestpair_Min numeric vector mismatching_aligned_bestpair_Q1 numeric vector mismatching_aligned_bestpair_Median numeric vector mismatching_aligned_bestpair_Mean numeric vector mismatching_aligned_bestpair_Q3 numeric vector mismatching_aligned_bestpair_Max numeric vector mismatching_aligned_bestpair_L50 numeric vector mismatching_aligned_bestpair_Total numeric vector mismatching_aligned_bestpair_N numeric vector mismatching_target_bestpair_Min numeric vector mismatching_target_bestpair_Q1 numeric vector mismatching_target_bestpair_Median numeric vector mismatching_target_bestpair_Mean numeric vector mismatching_target_bestpair_Q3 numeric vector mismatching_target_bestpair_Max numeric vector mismatching_target_bestpair_L50 numeric vector mismatching_target_bestpair_Total numeric vector mismatching_target_bestpair_N numeric vector mismatching_query_bestpair_Min numeric vector mismatching_query_bestpair_Q1 numeric vector mismatching_query_bestpair_Median numeric vector mismatching_query_bestpair_Mean numeric vector mismatching_query_bestpair_Q3 numeric vector mismatching_query_bestpair_Max numeric vector mismatching_query_bestpair_L50 numeric vector mismatching_query_bestpair_Total numeric vector mismatching_query_bestpair_N numeric vector aligned_width_target_bestpair_Min numeric vector aligned_width_target_bestpair_Q1 numeric vector aligned_width_target_bestpair_Median numeric vector aligned_width_target_bestpair_Mean numeric vector aligned_width_target_bestpair_Q3 numeric vector aligned_width_target_bestpair_Max numeric vector aligned_width_target_bestpair_L50 numeric vector aligned_width_target_bestpair_Total numeric vector aligned_width_target_bestpair_N numeric vector aligned_width_query_bestpair_Min numeric vector aligned_width_query_bestpair_Q1 numeric vector aligned_width_query_bestpair_Median numeric vector aligned_width_query_bestpair_Mean numeric vector aligned_width_query_bestpair_Q3 numeric vector aligned_width_query_bestpair_Max numeric vector aligned_width_query_bestpair_L50 numeric vector aligned_width_query_bestpair_Total numeric vector aligned_width_query_bestpair_N numeric vector chain_width_target_bestpair_Min numeric vector chain_width_target_bestpair_Q1 numeric vector chain_width_target_bestpair_Median numeric vector chain_width_target_bestpair_Mean numeric vector chain_width_target_bestpair_Q3 numeric vector chain_width_target_bestpair_Max numeric vector chain_width_target_bestpair_L50 numeric vector chain_width_target_bestpair_Total numeric vector chain_width_target_bestpair_N numeric vector chain_width_query_bestpair_Min numeric vector chain_width_query_bestpair_Q1 numeric vector chain_width_query_bestpair_Median numeric vector chain_width_query_bestpair_Mean numeric vector chain_width_query_bestpair_Q3 numeric vector chain_width_query_bestpair_Max numeric vector chain_width_query_bestpair_L50 numeric vector chain_width_query_bestpair_Total numeric vector chain_width_query_bestpair_N numeric vector collinear_width_target_bestpair_Min numeric vector collinear_width_target_bestpair_Q1 numeric vector collinear_width_target_bestpair_Median numeric vector collinear_width_target_bestpair_Mean numeric vector collinear_width_target_bestpair_Q3 numeric vector collinear_width_target_bestpair_Max numeric vector collinear_width_target_bestpair_L50 numeric vector collinear_width_target_bestpair_Total numeric vector collinear_width_target_bestpair_N numeric vector isolated_width_target_bestpair_Min numeric vector isolated_width_target_bestpair_Q1 numeric vector isolated_width_target_bestpair_Median numeric vector isolated_width_target_bestpair_Mean numeric vector isolated_width_target_bestpair_Q3 numeric vector isolated_width_target_bestpair_Max numeric vector isolated_width_target_bestpair_L50 numeric vector isolated_width_target_bestpair_Total numeric vector isolated_width_target_bestpair_N numeric vector bridge_width_target_bestpair_Min numeric vector bridge_width_target_bestpair_Q1 numeric vector bridge_width_target_bestpair_Median numeric vector bridge_width_target_bestpair_Mean numeric vector bridge_width_target_bestpair_Q3 numeric vector bridge_width_target_bestpair_Max numeric vector bridge_width_target_bestpair_L50 numeric vector bridge_width_target_bestpair_Total numeric vector bridge_width_target_bestpair_N numeric vector breakpoint_width_target_bestpair_Min numeric vector breakpoint_width_target_bestpair_Q1 numeric vector breakpoint_width_target_bestpair_Median numeric vector breakpoint_width_target_bestpair_Mean numeric vector breakpoint_width_target_bestpair_Q3 numeric vector breakpoint_width_target_bestpair_Max numeric vector breakpoint_width_target_bestpair_L50 numeric vector breakpoint_width_target_bestpair_Total numeric vector breakpoint_width_target_bestpair_N numeric vector inverted_width_target_bestpair_Min numeric vector inverted_width_target_bestpair_Q1 numeric vector inverted_width_target_bestpair_Median numeric vector inverted_width_target_bestpair_Mean numeric vector inverted_width_target_bestpair_Q3 numeric vector inverted_width_target_bestpair_Max numeric vector inverted_width_target_bestpair_L50 numeric vector inverted_width_target_bestpair_Total numeric vector inverted_width_target_bestpair_N numeric vector translocated_width_target_bestpair_Min numeric vector translocated_width_target_bestpair_Q1 numeric vector translocated_width_target_bestpair_Median numeric vector translocated_width_target_bestpair_Mean numeric vector translocated_width_target_bestpair_Q3 numeric vector translocated_width_target_bestpair_Max numeric vector translocated_width_target_bestpair_L50 numeric vector translocated_width_target_bestpair_Total numeric vector translocated_width_target_bestpair_N numeric vector guessed_target_length_bestpair_Min numeric vector guessed_target_length_bestpair_Q1 numeric vector guessed_target_length_bestpair_Median numeric vector guessed_target_length_bestpair_Mean numeric vector guessed_target_length_bestpair_Q3 numeric vector guessed_target_length_bestpair_Max numeric vector guessed_target_length_bestpair_L50 numeric vector guessed_target_length_bestpair_Total numeric vector guessed_target_length_bestpair_N numeric vector guessed_query_length_bestpair_Min numeric vector guessed_query_length_bestpair_Q1 numeric vector guessed_query_length_bestpair_Median numeric vector guessed_query_length_bestpair_Mean numeric vector guessed_query_length_bestpair_Q3 numeric vector guessed_query_length_bestpair_Max numeric vector guessed_query_length_bestpair_L50 numeric vector guessed_query_length_bestpair_Total numeric vector guessed_query_length_bestpair_N numeric vector index_synteny_target_bestpair numeric vector index_synteny_query_bestpair numeric vector index_correlation_target_bestpair numeric vector index_correlation_query_bestpair numeric vector index_GOCvicinity4_target_bestpair numeric vector index_GOCvicinity4_query_bestpair numeric vector index_strandRand_target_bestpair numeric vector index_strandRand_query_bestpair numeric vector species1 character vector species2 character vector index_avg_strandRand numeric vector percent_identity_global numeric vector","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/exDataFrame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"exDataFrame — exDataFrame","text":"Dataframe containing wide variety genome comparison calculations. Calculations ending \"..._bestpair\" meant utilized bacteria, archaea, species many plasmid, minichromosomes, etc. bestpair calculation compares two largest chromosomes species rather entire genome.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/exDataFrame.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"exDataFrame — exDataFrame","text":"Data comes Nextflow pairwise alignment pipeline.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/exDataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"exDataFrame — exDataFrame","text":"","code":"data(exDataFrame) ## maybe str(exDataFrame) ; plot(exDataFrame) ..."},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/extractValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract values from a matrix. — extractValues","title":"Extract values from a matrix. — extractValues","text":"Extract values matrix.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/extractValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract values from a matrix. — extractValues","text":"","code":"extractValues(node, your_tibble, your_matrix, fun = mean)"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/extractValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract values from a matrix. — extractValues","text":"node Node your_tibble Tibble data developed tree. your_matrix Matrix containing species data. fun Calculates mean, median, etc. node values plot tree (default fun mean)","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/extractValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract values from a matrix. — extractValues","text":"Values store variable (percent identity, strand randomisation index, etc.)","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/extractValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract values from a matrix. — extractValues","text":"","code":"unique(Tibble$parent) |> sort() |> purrr::set_names() |> sapply(extractValues, Tibble, valueMatrix) #>          7          8          9         10         11  #> 0.06655309 0.33675900 0.12072017 0.38749185 0.39714395"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/formatStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Format species data and calculate percent identity and strand randomisation variables as part of the dataframe. — formatStats","title":"Format species data and calculate percent identity and strand randomisation variables as part of the dataframe. — formatStats","text":"Format species data calculate percent identity strand randomisation variables part dataframe.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/formatStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format species data and calculate percent identity and strand randomisation variables as part of the dataframe. — formatStats","text":"","code":"formatStats(files)"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/formatStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format species data and calculate percent identity and strand randomisation variables as part of the dataframe. — formatStats","text":"files named character vector paths YAML files.  names become row names output data frame. Compressed files \\ accepted.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/formatStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format species data and calculate percent identity and strand randomisation variables as part of the dataframe. — formatStats","text":"Formatted dataframe strand randomisation percent identities species calculated.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/formatStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format species data and calculate percent identity and strand randomisation variables as part of the dataframe. — formatStats","text":"","code":"resultsDir <- system.file(\"extdata/PairwiseComparisons\", package = \"ScrambledTreeBuilder\") yamlFileData <- list.files(resultsDir, pattern = \"*.yaml.bz2\", full.names = TRUE) names(yamlFileData) <- yamlFileData |> basename() |> sub(pat = \".yaml.bz2\", rep=\"\") exDataFrame <- formatStats(yamlFileData) exDataFrame[1:10,1:6] #>                                                             aligned_length_Min #> Halobacterium_litoreum___Halobacterium_noricense                            62 #> Halobacterium_litoreum___Halobacterium_salinarum                           100 #> Halobacterium_litoreum___Haloferax_mediterranei_ATCC_33500                  92 #> Halobacterium_litoreum___Haloferax_volcanii_DS2                             72 #> Halobacterium_litoreum___Salarchaeum_japonicum                              66 #> Halobacterium_noricense___Halobacterium_litoreum                            66 #> Halobacterium_noricense___Halobacterium_salinarum                           76 #> Halobacterium_noricense___Haloferax_mediterranei_ATCC_33500                 60 #> Halobacterium_noricense___Haloferax_volcanii_DS2                            79 #> Halobacterium_noricense___Salarchaeum_japonicum                             77 #>                                                             aligned_length_Q1 #> Halobacterium_litoreum___Halobacterium_noricense                       717.50 #> Halobacterium_litoreum___Halobacterium_salinarum                       778.00 #> Halobacterium_litoreum___Haloferax_mediterranei_ATCC_33500             546.50 #> Halobacterium_litoreum___Haloferax_volcanii_DS2                        585.00 #> Halobacterium_litoreum___Salarchaeum_japonicum                         674.75 #> Halobacterium_noricense___Halobacterium_litoreum                       718.75 #> Halobacterium_noricense___Halobacterium_salinarum                      731.00 #> Halobacterium_noricense___Haloferax_mediterranei_ATCC_33500            557.00 #> Halobacterium_noricense___Haloferax_volcanii_DS2                       577.75 #> Halobacterium_noricense___Salarchaeum_japonicum                        684.00 #>                                                             aligned_length_Median #> Halobacterium_litoreum___Halobacterium_noricense                           1409.0 #> Halobacterium_litoreum___Halobacterium_salinarum                           1459.5 #> Halobacterium_litoreum___Haloferax_mediterranei_ATCC_33500                  949.0 #> Halobacterium_litoreum___Haloferax_volcanii_DS2                             994.5 #> Halobacterium_litoreum___Salarchaeum_japonicum                             1260.5 #> Halobacterium_noricense___Halobacterium_litoreum                           1422.5 #> Halobacterium_noricense___Halobacterium_salinarum                          1349.0 #> Halobacterium_noricense___Haloferax_mediterranei_ATCC_33500                 963.0 #> Halobacterium_noricense___Haloferax_volcanii_DS2                            998.0 #> Halobacterium_noricense___Salarchaeum_japonicum                            1235.0 #>                                                             aligned_length_Mean #> Halobacterium_litoreum___Halobacterium_noricense                       2177.722 #> Halobacterium_litoreum___Halobacterium_salinarum                       2248.691 #> Halobacterium_litoreum___Haloferax_mediterranei_ATCC_33500             1185.227 #> Halobacterium_litoreum___Haloferax_volcanii_DS2                        1296.762 #> Halobacterium_litoreum___Salarchaeum_japonicum                         1813.424 #> Halobacterium_noricense___Halobacterium_litoreum                       2211.831 #> Halobacterium_noricense___Halobacterium_salinarum                      2089.673 #> Halobacterium_noricense___Haloferax_mediterranei_ATCC_33500            1213.886 #> Halobacterium_noricense___Haloferax_volcanii_DS2                       1309.893 #> Halobacterium_noricense___Salarchaeum_japonicum                        1781.424 #>                                                             aligned_length_Q3 #> Halobacterium_litoreum___Halobacterium_noricense                      2926.50 #> Halobacterium_litoreum___Halobacterium_salinarum                      3053.00 #> Halobacterium_litoreum___Haloferax_mediterranei_ATCC_33500            1506.50 #> Halobacterium_litoreum___Haloferax_volcanii_DS2                       1649.25 #> Halobacterium_litoreum___Salarchaeum_japonicum                        2315.00 #> Halobacterium_noricense___Halobacterium_litoreum                      2988.50 #> Halobacterium_noricense___Halobacterium_salinarum                     2668.50 #> Halobacterium_noricense___Haloferax_mediterranei_ATCC_33500           1521.00 #> Halobacterium_noricense___Haloferax_volcanii_DS2                      1640.25 #> Halobacterium_noricense___Salarchaeum_japonicum                       2238.50 #>                                                             aligned_length_Max #> Halobacterium_litoreum___Halobacterium_noricense                         18125 #> Halobacterium_litoreum___Halobacterium_salinarum                         18237 #> Halobacterium_litoreum___Haloferax_mediterranei_ATCC_33500               14391 #> Halobacterium_litoreum___Haloferax_volcanii_DS2                          14440 #> Halobacterium_litoreum___Salarchaeum_japonicum                           20211 #> Halobacterium_noricense___Halobacterium_litoreum                         18125 #> Halobacterium_noricense___Halobacterium_salinarum                        20473 #> Halobacterium_noricense___Haloferax_mediterranei_ATCC_33500              14665 #> Halobacterium_noricense___Haloferax_volcanii_DS2                         13872 #> Halobacterium_noricense___Salarchaeum_japonicum                          18158"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/getStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get statistical information from .yaml files. — getStats","title":"Get statistical information from .yaml files. — getStats","text":"Get statistical information .yaml files.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/getStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get statistical information from .yaml files. — getStats","text":"","code":"getStats(file)"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/getStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get statistical information from .yaml files. — getStats","text":"file .yaml file containing species information.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/getStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get statistical information from .yaml files. — getStats","text":"Unpacked .yaml file data.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/getStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get statistical information from .yaml files. — getStats","text":"","code":"resultsDir <- system.file(\"extdata/PairwiseComparisons\", package = \"ScrambledTreeBuilder\") yamlFileData <- list.files(resultsDir, pattern = \"*.yaml.bz2\", full.names = TRUE) getStats(yamlFileData[1]) #>                        aligned_length_Min  #>                              6.200000e+01  #>                         aligned_length_Q1  #>                              7.175000e+02  #>                     aligned_length_Median  #>                              1.409000e+03  #>                       aligned_length_Mean  #>                              2.177722e+03  #>                         aligned_length_Q3  #>                              2.926500e+03  #>                        aligned_length_Max  #>                              1.812500e+04  #>                        aligned_length_L50  #>                              4.602071e+03  #>                      aligned_length_Total  #>                              1.785732e+06  #>                          aligned_length_N  #>                              8.200000e+02  #>                         aligned_score_Min  #>                              2.420000e+02  #>                          aligned_score_Q1  #>                              1.643500e+03  #>                      aligned_score_Median  #>                              3.905500e+03  #>                        aligned_score_Mean  #>                              5.899644e+03  #>                          aligned_score_Q3  #>                              7.701250e+03  #>                         aligned_score_Max  #>                              5.811300e+04  #>                         aligned_score_L50  #>                              1.350195e+04  #>                       aligned_score_Total  #>                              4.837708e+06  #>                           aligned_score_N  #>                              8.200000e+02  #>                       aligned_matches_Min  #>                              5.500000e+01  #>                        aligned_matches_Q1  #>                              5.537500e+02  #>                    aligned_matches_Median  #>                              1.130500e+03  #>                      aligned_matches_Mean  #>                              1.716306e+03  #>                        aligned_matches_Q3  #>                              2.311250e+03  #>                       aligned_matches_Max  #>                              1.513100e+04  #>                       aligned_matches_L50  #>                              3.695254e+03  #>                     aligned_matches_Total  #>                              1.407371e+06  #>                         aligned_matches_N  #>                              8.200000e+02  #>                    aligned_mismatches_Min  #>                              5.000000e+00  #>                     aligned_mismatches_Q1  #>                              1.420000e+02  #>                 aligned_mismatches_Median  #>                              2.635000e+02  #>                   aligned_mismatches_Mean  #>                              3.944085e+02  #>                     aligned_mismatches_Q3  #>                              5.242500e+02  #>                    aligned_mismatches_Max  #>                              2.913000e+03  #>                    aligned_mismatches_L50  #>                              7.979011e+02  #>                  aligned_mismatches_Total  #>                              3.234150e+05  #>                      aligned_mismatches_N  #>                              8.200000e+02  #>                   aligned_gaps_target_Min  #>                              0.000000e+00  #>                    aligned_gaps_target_Q1  #>                              0.000000e+00  #>                aligned_gaps_target_Median  #>                              1.100000e+01  #>                  aligned_gaps_target_Mean  #>                              3.966220e+01  #>                    aligned_gaps_target_Q3  #>                              5.700000e+01  #>                   aligned_gaps_target_Max  #>                              3.930000e+02  #>                   aligned_gaps_target_L50  #>                              1.305361e+02  #>                 aligned_gaps_target_Total  #>                              3.252300e+04  #>                     aligned_gaps_target_N  #>                              8.200000e+02  #>                    aligned_gaps_query_Min  #>                              0.000000e+00  #>                     aligned_gaps_query_Q1  #>                              0.000000e+00  #>                 aligned_gaps_query_Median  #>                              8.000000e+00  #>                   aligned_gaps_query_Mean  #>                              2.734512e+01  #>                     aligned_gaps_query_Q3  #>                              3.800000e+01  #>                    aligned_gaps_query_Max  #>                              3.270000e+02  #>                    aligned_gaps_query_L50  #>                              9.337613e+01  #>                  aligned_gaps_query_Total  #>                              2.242300e+04  #>                      aligned_gaps_query_N  #>                              8.200000e+02  #>                      matching_aligned_Min  #>                              5.763293e+01  #>                       matching_aligned_Q1  #>                              7.527853e+01  #>                   matching_aligned_Median  #>                              7.918828e+01  #>                     matching_aligned_Mean  #>                              7.812704e+01  #>                       matching_aligned_Q3  #>                              8.235560e+01  #>                      matching_aligned_Max  #>                              9.418605e+01  #>                      matching_aligned_L50  #>                              7.865756e+01  #>                    matching_aligned_Total  #>                              6.406417e+04  #>                        matching_aligned_N  #>                              8.200000e+02  #>                       matching_target_Min  #>                              5.853659e+01  #>                        matching_target_Q1  #>                              7.667055e+01  #>                    matching_target_Median  #>                              8.029087e+01  #>                      matching_target_Mean  #>                              7.932612e+01  #>                        matching_target_Q3  #>                              8.330848e+01  #>                       matching_target_Max  #>                              9.418605e+01  #>                       matching_target_L50  #>                              7.980250e+01  #>                     matching_target_Total  #>                              6.504742e+04  #>                         matching_target_N  #>                              8.200000e+02  #>                        matching_query_Min  #>                              5.853659e+01  #>                         matching_query_Q1  #>                              7.634382e+01  #>                     matching_query_Median  #>                              7.992700e+01  #>                       matching_query_Mean  #>                              7.907539e+01  #>                         matching_query_Q3  #>                              8.296295e+01  #>                        matching_query_Max  #>                              9.418605e+01  #>                        matching_query_L50  #>                              7.953733e+01  #>                      matching_query_Total  #>                              6.484182e+04  #>                          matching_query_N  #>                              8.200000e+02  #>                   mismatching_aligned_Min  #>                              5.813954e+00  #>                    mismatching_aligned_Q1  #>                              1.543644e+01  #>                mismatching_aligned_Median  #>                              1.812141e+01  #>                  mismatching_aligned_Mean  #>                              1.912067e+01  #>                    mismatching_aligned_Q3  #>                              2.139492e+01  #>                   mismatching_aligned_Max  #>                              3.927959e+01  #>                   mismatching_aligned_L50  #>                              2.075907e+01  #>                 mismatching_aligned_Total  #>                              1.567895e+04  #>                     mismatching_aligned_N  #>                              8.200000e+02  #>                    mismatching_target_Min  #>                              5.813954e+00  #>                     mismatching_target_Q1  #>                              1.571515e+01  #>                 mismatching_target_Median  #>                              1.849935e+01  #>                   mismatching_target_Mean  #>                              1.942023e+01  #>                     mismatching_target_Q3  #>                              2.183473e+01  #>                    mismatching_target_Max  #>                              3.989547e+01  #>                    mismatching_target_L50  #>                              2.106898e+01  #>                  mismatching_target_Total  #>                              1.592459e+04  #>                      mismatching_target_N  #>                              8.200000e+02  #>                     mismatching_query_Min  #>                              5.813954e+00  #>                      mismatching_query_Q1  #>                              1.558840e+01  #>                  mismatching_query_Median  #>                              1.832280e+01  #>                    mismatching_query_Mean  #>                              1.937048e+01  #>                      mismatching_query_Q3  #>                              2.180056e+01  #>                     mismatching_query_Max  #>                              3.989547e+01  #>                     mismatching_query_L50  #>                              2.104138e+01  #>                   mismatching_query_Total  #>                              1.588379e+04  #>                       mismatching_query_N  #>                              8.200000e+02  #>                  aligned_width_target_Min  #>                              6.200000e+01  #>                   aligned_width_target_Q1  #>                              7.127500e+02  #>               aligned_width_target_Median  #>                              1.372000e+03  #>                 aligned_width_target_Mean  #>                              2.138060e+03  #>                   aligned_width_target_Q3  #>                              2.868250e+03  #>                  aligned_width_target_Max  #>                              1.806200e+04  #>                  aligned_width_target_L50  #>                              4.513377e+03  #>                aligned_width_target_Total  #>                              1.753209e+06  #>                    aligned_width_target_N  #>                              8.200000e+02  #>                   aligned_width_query_Min  #>                              6.200000e+01  #>                    aligned_width_query_Q1  #>                              7.137500e+02  #>                aligned_width_query_Median  #>                              1.396000e+03  #>                  aligned_width_query_Mean  #>                              2.150377e+03  #>                    aligned_width_query_Q3  #>                              2.886250e+03  #>                   aligned_width_query_Max  #>                              1.796200e+04  #>                   aligned_width_query_L50  #>                              4.543958e+03  #>                 aligned_width_query_Total  #>                              1.763309e+06  #>                     aligned_width_query_N  #>                              8.200000e+02  #>                    chain_width_target_Min  #>                              6.200000e+01  #>                     chain_width_target_Q1  #>                              6.280000e+02  #>                 chain_width_target_Median  #>                              2.263000e+03  #>                   chain_width_target_Mean  #>                              7.087052e+03  #>                     chain_width_target_Q3  #>                              9.332500e+03  #>                    chain_width_target_Max  #>                              4.991400e+04  #>                    chain_width_target_L50  #>                              2.086142e+04  #>                  chain_width_target_Total  #>                              2.182812e+06  #>                      chain_width_target_N  #>                              3.080000e+02  #>                     chain_width_query_Min  #>                              6.200000e+01  #>                      chain_width_query_Q1  #>                              6.332500e+02  #>                  chain_width_query_Median  #>                              2.078000e+03  #>                    chain_width_query_Mean  #>                              6.916279e+03  #>                      chain_width_query_Q3  #>                              9.109500e+03  #>                     chain_width_query_Max  #>                              6.022700e+04  #>                     chain_width_query_L50  #>                              2.109225e+04  #>                   chain_width_query_Total  #>                              2.130214e+06  #>                       chain_width_query_N  #>                              3.080000e+02  #>                collinear_width_target_Min  #>                              7.900000e+01  #>                 collinear_width_target_Q1  #>                              9.125000e+02  #>             collinear_width_target_Median  #>                              1.668000e+03  #>               collinear_width_target_Mean  #>                              2.395406e+03  #>                 collinear_width_target_Q3  #>                              3.242000e+03  #>                collinear_width_target_Max  #>                              1.806200e+04  #>                collinear_width_target_L50  #>                              4.685756e+03  #>              collinear_width_target_Total  #>                              1.568991e+06  #>                  collinear_width_target_N  #>                              6.550000e+02  #>                 isolated_width_target_Min  #>                              6.200000e+01  #>                  isolated_width_target_Q1  #>                              3.210000e+02  #>              isolated_width_target_Median  #>                              6.710000e+02  #>                isolated_width_target_Mean  #>                              1.116473e+03  #>                  isolated_width_target_Q3  #>                              1.322000e+03  #>                 isolated_width_target_Max  #>                              1.219100e+04  #>                 isolated_width_target_L50  #>                              3.045219e+03  #>               isolated_width_target_Total  #>                              1.842180e+05  #>                   isolated_width_target_N  #>                              1.650000e+02  #>                   bridge_width_target_Min  #>                              2.000000e+00  #>                    bridge_width_target_Q1  #>                              1.090000e+02  #>                bridge_width_target_Median  #>                              4.155000e+02  #>                  bridge_width_target_Mean  #>                              8.605500e+02  #>                    bridge_width_target_Q3  #>                              1.093500e+03  #>                   bridge_width_target_Max  #>                              1.099500e+04  #>                   bridge_width_target_L50  #>                              2.818691e+03  #>                 bridge_width_target_Total  #>                              4.302750e+05  #>                     bridge_width_target_N  #>                              5.000000e+02  #>               breakpoint_width_target_Min  #>                              1.000000e+00  #>                breakpoint_width_target_Q1  #>                              8.700000e+01  #>            breakpoint_width_target_Median  #>                              3.620000e+02  #>              breakpoint_width_target_Mean  #>                              1.671927e+03  #>                breakpoint_width_target_Q3  #>                              1.556250e+03  #>               breakpoint_width_target_Max  #>                              2.545500e+04  #>               breakpoint_width_target_L50  #>                              8.871944e+03  #>             breakpoint_width_target_Total  #>                              5.015780e+05  #>                 breakpoint_width_target_N  #>                              3.000000e+02  #>                 inverted_width_target_Min  #>                              3.549000e+03  #>                  inverted_width_target_Q1  #>                              4.433500e+03  #>              inverted_width_target_Median  #>                              5.318000e+03  #>                inverted_width_target_Mean  #>                              5.318000e+03  #>                  inverted_width_target_Q3  #>                              6.202500e+03  #>                 inverted_width_target_Max  #>                              7.087000e+03  #>                 inverted_width_target_L50  #>                              5.906447e+03  #>               inverted_width_target_Total  #>                              1.063600e+04  #>                   inverted_width_target_N  #>                              2.000000e+00  #>             translocated_width_target_Min  #>                              4.550000e+02  #>              translocated_width_target_Q1  #>                              2.825750e+03  #>          translocated_width_target_Median  #>                              7.171500e+03  #>            translocated_width_target_Mean  #>                              1.163458e+04  #>              translocated_width_target_Q3  #>                              1.616575e+04  #>             translocated_width_target_Max  #>                              4.308600e+04  #>             translocated_width_target_L50  #>                              2.279738e+04  #>           translocated_width_target_Total  #>                              7.678820e+05  #>               translocated_width_target_N  #>                              6.600000e+01  #>                 guessed_target_length_Min  #>                              2.697406e+06  #>                  guessed_target_length_Q1  #>                              2.697406e+06  #>              guessed_target_length_Median  #>                              2.697406e+06  #>                guessed_target_length_Mean  #>                              2.697406e+06  #>                  guessed_target_length_Q3  #>                              2.697406e+06  #>                 guessed_target_length_Max  #>                              2.697406e+06  #>                 guessed_target_length_L50  #>                              2.697406e+06  #>               guessed_target_length_Total  #>                              2.697406e+06  #>                   guessed_target_length_N  #>                              1.000000e+00  #>                  guessed_query_length_Min  #>                              3.686400e+05  #>                   guessed_query_length_Q1  #>                              9.999100e+05  #>               guessed_query_length_Median  #>                              1.631180e+06  #>                 guessed_query_length_Mean  #>                              1.631180e+06  #>                   guessed_query_length_Q3  #>                              2.262450e+06  #>                  guessed_query_length_Max  #>                              2.893720e+06  #>                  guessed_query_length_L50  #>                              2.608391e+06  #>                guessed_query_length_Total  #>                              3.262360e+06  #>                    guessed_query_length_N  #>                              2.000000e+00  #>                      index_synteny_target  #>                              9.892226e-01  #>                       index_synteny_query  #>                              1.000000e+00  #>                  index_correlation_target  #>                             -6.036899e-01  #>                   index_correlation_query  #>                             -6.055977e-01  #>                 index_GOCvicinity4_target  #>                              7.310513e-01  #>                  index_GOCvicinity4_query  #>                              7.156863e-01  #>                   index_strandRand_target  #>                              3.939730e-01  #>                    index_strandRand_query  #>                              3.951871e-01  #>               aligned_length_bestpair_Min  #>                              6.200000e+01  #>                aligned_length_bestpair_Q1  #>                              7.510000e+02  #>            aligned_length_bestpair_Median  #>                              1.427000e+03  #>              aligned_length_bestpair_Mean  #>                              2.199990e+03  #>                aligned_length_bestpair_Q3  #>                              2.984000e+03  #>               aligned_length_bestpair_Max  #>                              1.812500e+04  #>               aligned_length_bestpair_L50  #>                              4.620614e+03  #>             aligned_length_bestpair_Total  #>                              1.766592e+06  #>                 aligned_length_bestpair_N  #>                              8.030000e+02  #>                aligned_score_bestpair_Min  #>                              2.420000e+02  #>                 aligned_score_bestpair_Q1  #>                              1.680500e+03  #>             aligned_score_bestpair_Median  #>                              3.935000e+03  #>               aligned_score_bestpair_Mean  #>                              5.973237e+03  #>                 aligned_score_bestpair_Q3  #>                              7.767000e+03  #>                aligned_score_bestpair_Max  #>                              5.811300e+04  #>                aligned_score_bestpair_L50  #>                              1.355149e+04  #>              aligned_score_bestpair_Total  #>                              4.796509e+06  #>                  aligned_score_bestpair_N  #>                              8.030000e+02  #>              aligned_matches_bestpair_Min  #>                              5.500000e+01  #>               aligned_matches_bestpair_Q1  #>                              5.680000e+02  #>           aligned_matches_bestpair_Median  #>                              1.145000e+03  #>             aligned_matches_bestpair_Mean  #>                              1.735183e+03  #>               aligned_matches_bestpair_Q3  #>                              2.337500e+03  #>              aligned_matches_bestpair_Max  #>                              1.513100e+04  #>              aligned_matches_bestpair_L50  #>                              3.709876e+03  #>            aligned_matches_bestpair_Total  #>                              1.393352e+06  #>                aligned_matches_bestpair_N  #>                              8.030000e+02  #>           aligned_mismatches_bestpair_Min  #>                              5.000000e+00  #>            aligned_mismatches_bestpair_Q1  #>                              1.460000e+02  #>        aligned_mismatches_bestpair_Median  #>                              2.640000e+02  #>          aligned_mismatches_bestpair_Mean  #>                              3.970635e+02  #>            aligned_mismatches_bestpair_Q3  #>                              5.325000e+02  #>           aligned_mismatches_bestpair_Max  #>                              2.913000e+03  #>           aligned_mismatches_bestpair_L50  #>                              8.001108e+02  #>         aligned_mismatches_bestpair_Total  #>                              3.188420e+05  #>             aligned_mismatches_bestpair_N  #>                              8.030000e+02  #>          aligned_gaps_target_bestpair_Min  #>                              0.000000e+00  #>           aligned_gaps_target_bestpair_Q1  #>                              0.000000e+00  #>       aligned_gaps_target_bestpair_Median  #>                              1.100000e+01  #>         aligned_gaps_target_bestpair_Mean  #>                              4.019676e+01  #>           aligned_gaps_target_bestpair_Q3  #>                              5.700000e+01  #>          aligned_gaps_target_bestpair_Max  #>                              3.930000e+02  #>          aligned_gaps_target_bestpair_L50  #>                              1.310060e+02  #>        aligned_gaps_target_bestpair_Total  #>                              3.227800e+04  #>            aligned_gaps_target_bestpair_N  #>                              8.030000e+02  #>           aligned_gaps_query_bestpair_Min  #>                              0.000000e+00  #>            aligned_gaps_query_bestpair_Q1  #>                              0.000000e+00  #>        aligned_gaps_query_bestpair_Median  #>                              8.000000e+00  #>          aligned_gaps_query_bestpair_Mean  #>                              2.754670e+01  #>            aligned_gaps_query_bestpair_Q3  #>                              3.800000e+01  #>           aligned_gaps_query_bestpair_Max  #>                              3.270000e+02  #>           aligned_gaps_query_bestpair_L50  #>                              9.380380e+01  #>         aligned_gaps_query_bestpair_Total  #>                              2.212000e+04  #>             aligned_gaps_query_bestpair_N  #>                              8.030000e+02  #>             matching_aligned_bestpair_Min  #>                              5.763293e+01  #>              matching_aligned_bestpair_Q1  #>                              7.535440e+01  #>          matching_aligned_bestpair_Median  #>                              7.923664e+01  #>            matching_aligned_bestpair_Mean  #>                              7.825679e+01  #>              matching_aligned_bestpair_Q3  #>                              8.243074e+01  #>             matching_aligned_bestpair_Max  #>                              9.418605e+01  #>             matching_aligned_bestpair_L50  #>                              7.876937e+01  #>           matching_aligned_bestpair_Total  #>                              6.284020e+04  #>               matching_aligned_bestpair_N  #>                              8.030000e+02  #>              matching_target_bestpair_Min  #>                              5.853659e+01  #>               matching_target_bestpair_Q1  #>                              7.682993e+01  #>           matching_target_bestpair_Median  #>                              8.034529e+01  #>             matching_target_bestpair_Mean  #>                              7.946569e+01  #>               matching_target_bestpair_Q3  #>                              8.334542e+01  #>              matching_target_bestpair_Max  #>                              9.418605e+01  #>              matching_target_bestpair_L50  #>                              7.992431e+01  #>            matching_target_bestpair_Total  #>                              6.381095e+04  #>                matching_target_bestpair_N  #>                              8.030000e+02  #>               matching_query_bestpair_Min  #>                              5.853659e+01  #>                matching_query_bestpair_Q1  #>                              7.646771e+01  #>            matching_query_bestpair_Median  #>                              8.000000e+01  #>              matching_query_bestpair_Mean  #>                              7.920362e+01  #>                matching_query_bestpair_Q3  #>                              8.298615e+01  #>               matching_query_bestpair_Max  #>                              9.418605e+01  #>               matching_query_bestpair_L50  #>                              7.964851e+01  #>             matching_query_bestpair_Total  #>                              6.360050e+04  #>                 matching_query_bestpair_N  #>                              8.030000e+02  #>          mismatching_aligned_bestpair_Min  #>                              5.813954e+00  #>           mismatching_aligned_bestpair_Q1  #>                              1.534276e+01  #>       mismatching_aligned_bestpair_Median  #>                              1.796875e+01  #>         mismatching_aligned_bestpair_Mean  #>                              1.898626e+01  #>           mismatching_aligned_bestpair_Q3  #>                              2.127366e+01  #>          mismatching_aligned_bestpair_Max  #>                              3.927959e+01  #>          mismatching_aligned_bestpair_L50  #>                              2.056816e+01  #>        mismatching_aligned_bestpair_Total  #>                              1.524596e+04  #>            mismatching_aligned_bestpair_N  #>                              8.030000e+02  #>           mismatching_target_bestpair_Min  #>                              5.813954e+00  #>            mismatching_target_bestpair_Q1  #>                              1.568827e+01  #>        mismatching_target_bestpair_Median  #>                              1.839465e+01  #>          mismatching_target_bestpair_Mean  #>                              1.928617e+01  #>            mismatching_target_bestpair_Q3  #>                              2.157459e+01  #>           mismatching_target_bestpair_Max  #>                              3.989547e+01  #>           mismatching_target_bestpair_L50  #>                              2.087947e+01  #>         mismatching_target_bestpair_Total  #>                              1.548680e+04  #>             mismatching_target_bestpair_N  #>                              8.030000e+02  #>            mismatching_query_bestpair_Min  #>                              5.813954e+00  #>             mismatching_query_bestpair_Q1  #>                              1.554984e+01  #>         mismatching_query_bestpair_Median  #>                              1.823204e+01  #>           mismatching_query_bestpair_Mean  #>                              1.923332e+01  #>             mismatching_query_bestpair_Q3  #>                              2.148290e+01  #>            mismatching_query_bestpair_Max  #>                              3.989547e+01  #>            mismatching_query_bestpair_L50  #>                              2.084618e+01  #>          mismatching_query_bestpair_Total  #>                              1.544435e+04  #>              mismatching_query_bestpair_N  #>                              8.030000e+02  #>         aligned_width_target_bestpair_Min  #>                              6.200000e+01  #>          aligned_width_target_bestpair_Q1  #>                              7.355000e+02  #>      aligned_width_target_bestpair_Median  #>                              1.404000e+03  #>        aligned_width_target_bestpair_Mean  #>                              2.159793e+03  #>          aligned_width_target_bestpair_Q3  #>                              2.899500e+03  #>         aligned_width_target_bestpair_Max  #>                              1.806200e+04  #>         aligned_width_target_bestpair_L50  #>                              4.531509e+03  #>       aligned_width_target_bestpair_Total  #>                              1.734314e+06  #>           aligned_width_target_bestpair_N  #>                              8.030000e+02  #>          aligned_width_query_bestpair_Min  #>                              6.200000e+01  #>           aligned_width_query_bestpair_Q1  #>                              7.450000e+02  #>       aligned_width_query_bestpair_Median  #>                              1.412000e+03  #>         aligned_width_query_bestpair_Mean  #>                              2.172443e+03  #>           aligned_width_query_bestpair_Q3  #>                              2.949000e+03  #>          aligned_width_query_bestpair_Max  #>                              1.796200e+04  #>          aligned_width_query_bestpair_L50  #>                              4.562002e+03  #>        aligned_width_query_bestpair_Total  #>                              1.744472e+06  #>            aligned_width_query_bestpair_N  #>                              8.030000e+02  #>           chain_width_target_bestpair_Min  #>                              6.200000e+01  #>            chain_width_target_bestpair_Q1  #>                              6.580000e+02  #>        chain_width_target_bestpair_Median  #>                              2.531000e+03  #>          chain_width_target_bestpair_Mean  #>                              7.566315e+03  #>            chain_width_target_bestpair_Q3  #>                              1.013400e+04  #>           chain_width_target_bestpair_Max  #>                              4.991400e+04  #>           chain_width_target_bestpair_L50  #>                              2.147708e+04  #>         chain_width_target_bestpair_Total  #>                              2.186665e+06  #>             chain_width_target_bestpair_N  #>                              2.890000e+02  #>            chain_width_query_bestpair_Min  #>                              6.200000e+01  #>             chain_width_query_bestpair_Q1  #>                              6.650000e+02  #>         chain_width_query_bestpair_Median  #>                              2.465000e+03  #>           chain_width_query_bestpair_Mean  #>                              7.328014e+03  #>             chain_width_query_bestpair_Q3  #>                              9.852000e+03  #>            chain_width_query_bestpair_Max  #>                              6.022700e+04  #>            chain_width_query_bestpair_L50  #>                              2.161077e+04  #>          chain_width_query_bestpair_Total  #>                              2.117796e+06  #>              chain_width_query_bestpair_N  #>                              2.890000e+02  #>       collinear_width_target_bestpair_Min  #>                              7.900000e+01  #>        collinear_width_target_bestpair_Q1  #>                              9.145000e+02  #>    collinear_width_target_bestpair_Median  #>                              1.671000e+03  #>      collinear_width_target_bestpair_Mean  #>                              2.406338e+03  #>        collinear_width_target_bestpair_Q3  #>                              3.248500e+03  #>       collinear_width_target_bestpair_Max  #>                              1.806200e+04  #>       collinear_width_target_bestpair_L50  #>                              4.690705e+03  #>     collinear_width_target_bestpair_Total  #>                              1.566526e+06  #>         collinear_width_target_bestpair_N  #>                              6.510000e+02  #>        isolated_width_target_bestpair_Min  #>                              6.200000e+01  #>         isolated_width_target_bestpair_Q1  #>                              3.142500e+02  #>     isolated_width_target_bestpair_Median  #>                              6.715000e+02  #>       isolated_width_target_bestpair_Mean  #>                              1.103868e+03  #>         isolated_width_target_bestpair_Q3  #>                              1.322250e+03  #>        isolated_width_target_bestpair_Max  #>                              1.219100e+04  #>        isolated_width_target_bestpair_L50  #>                              3.045207e+03  #>      isolated_width_target_bestpair_Total  #>                              1.677880e+05  #>          isolated_width_target_bestpair_N  #>                              1.520000e+02  #>          bridge_width_target_bestpair_Min  #>                              2.000000e+00  #>           bridge_width_target_bestpair_Q1  #>                              1.100000e+02  #>       bridge_width_target_bestpair_Median  #>                              4.205000e+02  #>         bridge_width_target_bestpair_Mean  #>                              9.010976e+02  #>           bridge_width_target_bestpair_Q3  #>                              1.129000e+03  #>          bridge_width_target_bestpair_Max  #>                              1.532600e+04  #>          bridge_width_target_bestpair_L50  #>                              3.254973e+03  #>        bridge_width_target_bestpair_Total  #>                              4.523510e+05  #>            bridge_width_target_bestpair_N  #>                              5.020000e+02  #>      breakpoint_width_target_bestpair_Min  #>                              1.000000e+00  #>       breakpoint_width_target_bestpair_Q1  #>                              8.875000e+01  #>   breakpoint_width_target_bestpair_Median  #>                              3.860000e+02  #>     breakpoint_width_target_bestpair_Mean  #>                              1.752975e+03  #>       breakpoint_width_target_bestpair_Q3  #>                              1.592000e+03  #>      breakpoint_width_target_bestpair_Max  #>                              2.545500e+04  #>      breakpoint_width_target_bestpair_L50  #>                              9.613247e+03  #>    breakpoint_width_target_bestpair_Total  #>                              4.943390e+05  #>        breakpoint_width_target_bestpair_N  #>                              2.820000e+02  #>        inverted_width_target_bestpair_Min  #>                              3.549000e+03  #>         inverted_width_target_bestpair_Q1  #>                              4.433500e+03  #>     inverted_width_target_bestpair_Median  #>                              5.318000e+03  #>       inverted_width_target_bestpair_Mean  #>                              5.318000e+03  #>         inverted_width_target_bestpair_Q3  #>                              6.202500e+03  #>        inverted_width_target_bestpair_Max  #>                              7.087000e+03  #>        inverted_width_target_bestpair_L50  #>                              5.906447e+03  #>      inverted_width_target_bestpair_Total  #>                              1.063600e+04  #>          inverted_width_target_bestpair_N  #>                              2.000000e+00  #>    translocated_width_target_bestpair_Min  #>                              4.600000e+02  #>     translocated_width_target_bestpair_Q1  #>                              3.878000e+03  #> translocated_width_target_bestpair_Median  #>                              8.816000e+03  #>   translocated_width_target_bestpair_Mean  #>                              1.317841e+04  #>     translocated_width_target_bestpair_Q3  #>                              1.906000e+04  #>    translocated_width_target_bestpair_Max  #>                              4.308600e+04  #>    translocated_width_target_bestpair_L50  #>                              2.377436e+04  #>  translocated_width_target_bestpair_Total  #>                              8.038830e+05  #>      translocated_width_target_bestpair_N  #>                              6.100000e+01  #>        guessed_target_length_bestpair_Min  #>                              2.697406e+06  #>         guessed_target_length_bestpair_Q1  #>                              2.697406e+06  #>     guessed_target_length_bestpair_Median  #>                              2.697406e+06  #>       guessed_target_length_bestpair_Mean  #>                              2.697406e+06  #>         guessed_target_length_bestpair_Q3  #>                              2.697406e+06  #>        guessed_target_length_bestpair_Max  #>                              2.697406e+06  #>        guessed_target_length_bestpair_L50  #>                              2.697406e+06  #>      guessed_target_length_bestpair_Total  #>                              2.697406e+06  #>          guessed_target_length_bestpair_N  #>                              1.000000e+00  #>         guessed_query_length_bestpair_Min  #>                              2.893720e+06  #>          guessed_query_length_bestpair_Q1  #>                              2.893720e+06  #>      guessed_query_length_bestpair_Median  #>                              2.893720e+06  #>        guessed_query_length_bestpair_Mean  #>                              2.893720e+06  #>          guessed_query_length_bestpair_Q3  #>                              2.893720e+06  #>         guessed_query_length_bestpair_Max  #>                              2.893720e+06  #>         guessed_query_length_bestpair_L50  #>                              2.893720e+06  #>       guessed_query_length_bestpair_Total  #>                              2.893720e+06  #>           guessed_query_length_bestpair_N  #>                              1.000000e+00  #>             index_synteny_target_bestpair  #>                              1.000000e+00  #>              index_synteny_query_bestpair  #>                              1.000000e+00  #>         index_correlation_target_bestpair  #>                             -6.036899e-01  #>          index_correlation_query_bestpair  #>                             -6.034801e-01  #>        index_GOCvicinity4_target_bestpair  #>                              7.415730e-01  #>         index_GOCvicinity4_query_bestpair  #>                              7.340824e-01  #>          index_strandRand_target_bestpair  #>                              3.994363e-01  #>           index_strandRand_query_bestpair  #>                              3.982729e-01"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/makeMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a matrix from a data frame containing species data. — makeMatrix","title":"Make a matrix from a data frame containing species data. — makeMatrix","text":"Make matrix data frame containing species data.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/makeMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a matrix from a data frame containing species data. — makeMatrix","text":"","code":"makeMatrix(DF, column, defaultDiagonal = 100, defaultValue = NA)"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/makeMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a matrix from a data frame containing species data. — makeMatrix","text":"DF Data frame containing species information. column variable data frame want extract species data . defaultDiagonal Maximum possible value variable. defaultValue Minimum possible value variable.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/makeMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a matrix from a data frame containing species data. — makeMatrix","text":"matrix containing species names data selected variable.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/makeMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a matrix from a data frame containing species data. — makeMatrix","text":"","code":"makeMatrix(exDataFrame, \"percent_identity_global\", 100, 50) #>                                   Halobacterium_noricense #> Halobacterium_noricense                         100.00000 #> Halobacterium_salinarum                          74.74168 #> Haloferax_mediterranei_ATCC_33500                66.51318 #> Haloferax_volcanii_DS2                           69.96063 #> Salarchaeum_japonicum                            71.94129 #> Halobacterium_litoreum                           78.87231 #>                                   Halobacterium_salinarum #> Halobacterium_noricense                          74.72164 #> Halobacterium_salinarum                         100.00000 #> Haloferax_mediterranei_ATCC_33500                67.06152 #> Haloferax_volcanii_DS2                           68.47755 #> Salarchaeum_japonicum                            71.82141 #> Halobacterium_litoreum                           75.78684 #>                                   Haloferax_mediterranei_ATCC_33500 #> Halobacterium_noricense                                    68.55420 #> Halobacterium_salinarum                                    67.06788 #> Haloferax_mediterranei_ATCC_33500                         100.00000 #> Haloferax_volcanii_DS2                                     80.98460 #> Salarchaeum_japonicum                                      68.70265 #> Halobacterium_litoreum                                     68.88111 #>                                   Haloferax_volcanii_DS2 Salarchaeum_japonicum #> Halobacterium_noricense                         69.98252              72.22600 #> Halobacterium_salinarum                         68.48654              71.57797 #> Haloferax_mediterranei_ATCC_33500               80.80996              68.50482 #> Haloferax_volcanii_DS2                         100.00000              69.84616 #> Salarchaeum_japonicum                           69.87968             100.00000 #> Halobacterium_litoreum                          70.25591              72.76736 #>                                   Halobacterium_litoreum #> Halobacterium_noricense                         78.80471 #> Halobacterium_salinarum                         75.89491 #> Haloferax_mediterranei_ATCC_33500               68.49688 #> Haloferax_volcanii_DS2                          70.22052 #> Salarchaeum_japonicum                           72.77139 #> Halobacterium_litoreum                         100.00000"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/makeTidyTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a tidy tree — makeTidyTree","title":"Make a tidy tree — makeTidyTree","text":"Given distance matrix, computes cladogram stats::hclust function, returns tibble::tibble formatted tidytree package.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/makeTidyTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a tidy tree — makeTidyTree","text":"","code":"makeTidyTree(distMat)"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/makeTidyTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a tidy tree — makeTidyTree","text":"distMat distance matrix","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/makeTidyTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a tidy tree — makeTidyTree","text":"tbl_tree object","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/makeValueTibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Make new tibble dataset with added value column from a matrix — makeValueTibble","title":"Make new tibble dataset with added value column from a matrix — makeValueTibble","text":"Make new tibble dataset added value column matrix","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/makeValueTibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make new tibble dataset with added value column from a matrix — makeValueTibble","text":"","code":"makeValueTibble(your_tibble, your_matrix, fun = mean, colname = \"value\")"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/makeValueTibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make new tibble dataset with added value column from a matrix — makeValueTibble","text":"your_tibble Original tibble dataset add value column . your_matrix Matrix containing values add tibble. fun Default set mean. colname New column name value added tibble (defaut set \"value\").","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/makeValueTibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make new tibble dataset with added value column from a matrix — makeValueTibble","text":"New tibble values added.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/makeValueTibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make new tibble dataset with added value column from a matrix — makeValueTibble","text":"","code":"makeValueTibble(Tibble, valueMatrix, colname = \"Strand_Randomisation_Index\") #> # A tbl_tree abstraction: 11 × 5 #> # which can be converted to treedata or phylo  #> # via as.treedata or as.phylo #>    parent  node branch.length label                       Strand_Randomisation…¹ #>     <int> <int>         <dbl> <chr>                                        <dbl> #>  1     11     1         15.0  Halobacterium_noricense                    NA      #>  2     10     2         18.0  Halobacterium_salinarum                    NA      #>  3      8     3         13.7  Haloferax_mediterranei_ATC…                NA      #>  4      8     4         13.7  Haloferax_volcanii_DS2                     NA      #>  5      9     5         20.1  Salarchaeum_japonicum                      NA      #>  6     11     6         15.0  Halobacterium_litoreum                     NA      #>  7      7     7         NA    NA                                          0.0666 #>  8      7     8         11.1  NA                                          0.337  #>  9      7     9          4.62 NA                                          0.121  #> 10      9    10          2.19 NA                                          0.387  #> 11     10    11          2.98 NA                                          0.397  #> # ℹ abbreviated name: ¹​Strand_Randomisation_Index"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/subTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a subtree — subTree","title":"Extract a subtree — subTree","text":"Takes tibble representing tree, extract subtree given node.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/subTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a subtree — subTree","text":"","code":"subTree(tree_tibble, node_id)"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/subTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a subtree — subTree","text":"node_id ID number node base subtree. name description","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/subTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a subtree — subTree","text":"subtree represented tibble created tidytree package.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/subTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a subtree — subTree","text":"","code":"subTree(tibbleWithValue, 9) #> Error in subTree(tibbleWithValue, 9): object 'node' not found"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/tibbleWithValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Tibble with Added Value — tibbleWithValue","title":"Tibble with Added Value — tibbleWithValue","text":"Tibble utilized phylogenetic tree construction.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/tibbleWithValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tibble with Added Value — tibbleWithValue","text":"","code":"data(\"tibbleWithValue\")"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/tibbleWithValue.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tibble with Added Value — tibbleWithValue","text":"data frame 11 observations following 5 variables. parent numeric vector node numeric vector branch.length numeric vector label character vector value numeric vector","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/tibbleWithValue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tibble with Added Value — tibbleWithValue","text":"tibble dataset output makeValueTibble.R. tibble plotted using visualizeTree.R.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/tibbleWithValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tibble with Added Value — tibbleWithValue","text":"","code":"data(tibbleWithValue) ## maybe str(tibbleWithValue) ; plot(tibbleWithValue) ..."},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/treeMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree Matrix — treeMatrix","title":"Tree Matrix — treeMatrix","text":"Matrix build tree .","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/treeMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree Matrix — treeMatrix","text":"","code":"data(\"treeMatrix\")"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/treeMatrix.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tree Matrix — treeMatrix","text":"format :  num [1:6, 1:6] 100 74.7 66.5 70 71.9 ...  - attr(*, \"dimnames\")=List 2   ..$ : chr [1:6] \"Halobacterium_noricense\" \"Halobacterium_salinarum\" \"Haloferax_mediterranei_ATCC_33500\" \"Haloferax_volcanii_DS2\" ...   ..$ : chr [1:6] \"Halobacterium_noricense\" \"Halobacterium_salinarum\" \"Haloferax_mediterranei_ATCC_33500\" \"Haloferax_volcanii_DS2\" ...  - attr(*, \"builtWith\")= chr \"percent_identity_global\"","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/treeMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree Matrix — treeMatrix","text":"","code":"data(treeMatrix) ## maybe str(treeMatrix) ; plot(treeMatrix) ..."},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/valueMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Value Matrix — valueMatrix","title":"Value Matrix — valueMatrix","text":"Matrix extract value add tibble dataset.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/valueMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value Matrix — valueMatrix","text":"","code":"data(\"valueMatrix\")"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/valueMatrix.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Value Matrix — valueMatrix","text":"format :  num [1:6, 1:6] 1 0.2387 0.0488 0.0278 0.1148 ...  - attr(*, \"dimnames\")=List 2   ..$ : chr [1:6] \"Halobacterium_noricense\" \"Halobacterium_salinarum\" \"Haloferax_mediterranei_ATCC_33500\" \"Haloferax_volcanii_DS2\" ...   ..$ : chr [1:6] \"Halobacterium_noricense\" \"Halobacterium_salinarum\" \"Haloferax_mediterranei_ATCC_33500\" \"Haloferax_volcanii_DS2\" ...  - attr(*, \"builtWith\")= chr \"index_avg_strandRand\"","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/valueMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value Matrix — valueMatrix","text":"","code":"data(valueMatrix) ## maybe str(valueMatrix) ; plot(valueMatrix) ..."},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/visualizeTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a phylogenetic tree using tibble data. — visualizeTree","title":"Create a phylogenetic tree using tibble data. — visualizeTree","text":"Create phylogenetic tree using tibble data.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/visualizeTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a phylogenetic tree using tibble data. — visualizeTree","text":"","code":"visualizeTree(   your_tibble,   value,   valueround = 2,   outerlabelsize = 0.25,   innerlabelsize = 3,   ynudge = 0,   xnudge = 0 )"},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/visualizeTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a phylogenetic tree using tibble data. — visualizeTree","text":"your_tibble Tibble data containing species genome information. value Tibble value label internal nodes tree. valueround Number integers round value. outerlabelsize Size label border. innerlabelsize Overall size label. ynudge Adjust vertical position labels. xnudge Adjust horizontal position labels.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/visualizeTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a phylogenetic tree using tibble data. — visualizeTree","text":"phylogenetic tree showcasing phylogeny species additional calculated values.","code":""},{"path":"https://brennern.github.io/ScrambledTreeBuilder/reference/visualizeTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a phylogenetic tree using tibble data. — visualizeTree","text":"","code":"Tree <- visualizeTree(your_tibble = tibbleWithValue, value = tibbleWithValue$Strand_Randomisation_Index) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale."}]
